#################################################
# Package Vacuum Cleaner
#################################################
vacuum_cleaner:

# Devices
  #vacuum:
  #  - platform: xiaomi_miio
  #    host: 172.16.16.219
  #    token: !secret mi_vacuum_1s_token

  camera:
    - platform: xiaomi_cloud_map_extractor
      name: Mi Vacuum Cleaner 1S Cam
      host: 172.16.16.219
      token: !secret mi_vacuum_1s_token
      username: !secret xiaomi_cloud_username
      password: !secret xiaomi_cloud_password
      draw: ['all']
      colors:
        color_charger: [0, 255, 0, 180]
        color_robo: [0 , 0, 255]
      map_transformation:
        scale: 2
        trim:
          top: 10
          bottom: 20
          left: 20
          right: 17
      attributes:
        - calibration_points
      auto_update: false

# Input Select
  input_select:
    room_to_vacuum:
      name: 'Где убрать:'
      options:
        - Прихожая
        - Детская
        - Гостинная
        - Кухня
        - Спальня
      initial: Прихожая
      icon: mdi:crosshairs-gps

    vacuum_power:
      name: 'Выбор режима:'
      options:
        - Silent
        - Standard
        - Medium
        - Turbo
        - Gentle
      initial: Standard
      icon: mdi:speedometer

# Sensors
  sensor:
    - platform: template
      sensors:
        mirobot_1s_current_fan_speed:
          value_template: "{{ state_attr('vacuum.xiaomi_vacuum_cleaner', 'fan_speed') }}"
        mirobot_1s_battery:
          friendly_name: "Xiaomi Vacuum Cleaner 1S"
          device_class: battery
          unit_of_measurement: '%'
          icon_template: "{{ state_attr('vacuum.xiaomi_vacuum_cleaner', 'battery_icon') }}"
          value_template: "{{ state_attr('vacuum.xiaomi_vacuum_cleaner', 'battery_level') }}"
        mirobot_1s_main_brush_left:
          friendly_name: "Main brush hours remaining"
          unit_of_measurement: "h"
          value_template: "{{ state_attr('vacuum.xiaomi_vacuum_cleaner', 'main_brush_left') }}"
        mirobot_1s_side_brush_left:
          friendly_name: "Side brush hours remaining"
          unit_of_measurement: "h"
          value_template: "{{ state_attr('vacuum.xiaomi_vacuum_cleaner', 'side_brush_left') }}"
        mirobot_1s_filter_left:
          friendly_name: "Filter hours remaining"
          unit_of_measurement: "h"
          value_template: "{{ state_attr('vacuum.xiaomi_vacuum_cleaner', 'filter_left') }}"
        mirobot_1s_sensor_dirty_left:
          friendly_name: "Sensors hours remaining"
          unit_of_measurement: "h"
          value_template: "{{ state_attr('vacuum.xiaomi_vacuum_cleaner', 'sensor_dirty_left') }}"

# Scripts
  script:
    start_vacuum_room:
      alias: 'Clean Selected Room [Mi Robot]'
      sequence:
          - service: script.turn_on
            data_template:
              entity_id: >-
                {% if is_state("input_select.room_to_vacuum", "Прихожая") %}
                  script.start_vacuum_hallway
                {% elif is_state("input_select.room_to_vacuum", "Детская") %}
                  script.start_vacuum_nursery
                {% elif is_state("input_select.room_to_vacuum", "Гостинная") %}
                  script.start_vacuum_living_room
                {% elif is_state("input_select.room_to_vacuum", "Кухня") %}
                  script.start_vacuum_kitchen
                {% elif is_state("input_select.room_to_vacuum", "Спальня") %}
                  script.start_vacuum_bedroom
                {% endif %}

    start_vacuum_hallway_by_door_sensor:
      alias: 'Clean Hallway by Door Sensor [Mi Robot]'
      sequence:
        - delay:
            minutes: 8
        - service: vacuum.set_fan_speed
          data:
            entity_id: vacuum.xiaomi_vacuum_cleaner
            fan_speed: Standard
        - service: script.turn_on
          data:
            entity_id: script.start_vacuum_hallway

    start_vacuum_hallway:
      alias: 'Clean Hallway [Mi Robot]'
      sequence:
        - service: vacuum.send_command
          data:
            entity_id: vacuum.xiaomi_vacuum_cleaner
            command: app_segment_clean
            params: [17]

    start_vacuum_nursery:
      alias: 'Clean Nursery [Mi Robot]'
      sequence:
        - service: vacuum.send_command
          data:
            entity_id: vacuum.xiaomi_vacuum_cleaner
            command: app_segment_clean
            params: [19]

    start_vacuum_living_room:
      alias: 'Clean Living Room [Mi Robot]'
      sequence:
        - service: vacuum.send_command
          data:
            entity_id: vacuum.xiaomi_vacuum_cleaner
            command: app_segment_clean
            params: [16]

    start_vacuum_kitchen:
      alias: 'Clean Kitchen [Mi Robot]'
      sequence:
        - service: vacuum.send_command
          data:
            entity_id: vacuum.xiaomi_vacuum_cleaner
            command: app_segment_clean
            params: [18]

    start_vacuum_bedroom:
      alias: 'Clean Bedroom [Mi Robot]'
      sequence:
        - service: vacuum.send_command
          data:
            entity_id: vacuum.xiaomi_vacuum_cleaner
            command: app_segment_clean
            params: [20]

    set_vacuum_power_silent:
      sequence:
        service: vacuum.set_fan_speed
        data:
          entity_id: vacuum.xiaomi_vacuum_cleaner
          fan_speed: Silent

    set_vacuum_power_standard:
      sequence:
        service: vacuum.set_fan_speed
        data:
          entity_id: vacuum.xiaomi_vacuum_cleaner
          fan_speed: Standard

    set_vacuum_power_medium:
      sequence:
        service: vacuum.set_fan_speed
        data:
          entity_id: vacuum.xiaomi_vacuum_cleaner
          fan_speed: Medium

    set_vacuum_power_turbo:
      sequence:
        service: vacuum.set_fan_speed
        data:
          entity_id: vacuum.xiaomi_vacuum_cleaner
          fan_speed: Turbo

    set_vacuum_power_gentle:
      sequence:
        service: vacuum.set_fan_speed
        data:
          entity_id: vacuum.xiaomi_vacuum_cleaner
          fan_speed: Gentle

    reset_main_brush_left:
      sequence:
        - service: vacuum.send_command
          data:
            entity_id: vacuum.xiaomi_vacuum_cleaner
            command: reset_consumable
            params: ['main_brush_work_time']

    reset_side_brush_work_time:
      sequence:
        - service: vacuum.send_command
          data:
            entity_id: vacuum.xiaomi_vacuum_cleaner
            command: reset_consumable
            params: ['side_brush_work_time']

    reset_filter_work_time:
      sequence:
        - service: vacuum.send_command
          data:
            entity_id: vacuum.xiaomi_vacuum_cleaner
            command: reset_consumable
            params: ['filter_work_time']

    reset_sensor_dirty_time:
      sequence:
        - service: vacuum.send_command
          data:
            entity_id: vacuum.xiaomi_vacuum_cleaner
            command: reset_consumable
            params: ['sensor_dirty_time']

# Automations
  automation:
    - alias: 'Оповещение о начале уборки [notify to stall]'
      initial_state: true
      trigger:
        platform: state
        entity_id: vacuum.xiaomi_vacuum_cleaner
        to: "cleaning"
      action:
        - service: telegram_bot.send_message
          data:
            target: !secret tlg_stall_id
            message: "Mi Robot начал уборку."
            inline_keyboard:
              - 'Остановить:/vacuum_stop, На базу:/vacuum_go_home'

    - alias: 'Оповещение о возращении пылесоса на базу [notify to stall]'
      initial_state: true
      trigger:
        platform: state
        entity_id: vacuum.xiaomi_vacuum_cleaner
        to: "docked"
      condition:
        condition: template
        value_template: >
          {{ trigger.from_state.state != 'unavailable'}}
      action:
        - service: notify.telegram_stall
          data:
            message: "Mi Robot вернулся на базу (закончил уборку)."

    - alias: 'Оповещение о забытом пылесосе [notify to stall]'
      initial_state: true
      trigger:
        platform: state
        entity_id: vacuum.xiaomi_vacuum_cleaner
        to: "idle"
        for:
          minutes: 15
      action:
        - service: notify.telegram_stall
          data:
            message: "Mi Robot потерялся и бездельничает, отправляем на базу."
        - service: vacuum.return_to_base
          data:
            entity_id: vacuum.xiaomi_vacuum_cleaner

    - alias: 'Оповещение об ошибке [notify to stall]'
      initial_state: true
      trigger:
        platform: state
        entity_id: vacuum.xiaomi_vacuum_cleaner
        to: "error"
      action:
        - service: notify.telegram_stall
          data_template:
            message: |
              Mi Robot: Произошла *ошибка*!
              {{ state_attr('vacuum.xiaomi_vacuum_cleaner', "error") }}

    - alias: 'Ежедневная уборка по будням [утро]'
      initial_state: true
      trigger:
        platform: state
        entity_id: group.family_persons
        to: "not_home"
        for:
          minutes: 20
      condition:
        condition: and
        conditions:
          - condition: time
            after: "08:30:00"
            before: "10:30:00"
            weekday:
              - mon
              - tue
              - wed
              - thu
              - fri
          - condition: template
            value_template: '{{ now().day != states.automation.ezhednevnaia_uborka_po_budniam_utro.attributes.last_triggered.day | default(0) }}'
      action:
        - service: vacuum.set_fan_speed
          data:
            entity_id: vacuum.xiaomi_vacuum_cleaner
            fan_speed: Turbo
        - service: vacuum.start
          data:
            entity_id: vacuum.xiaomi_vacuum_cleaner

    - alias: 'Регулярная уборка прихожей'
      initial_state: true
      trigger:
        platform: state
        entity_id: binary_sensor.0x158d00031c790f_contact
        from: 'on'
        to: 'off'
      condition:
        condition: and
        conditions:
          - condition: time
            after: "09:30:00"
            before: "21:30:00"
          - condition: template
            value_template: '{{ (as_timestamp(now())-(as_timestamp(state_attr("automation.reguliarnaia_uborka_prikhozhei", "last_triggered")))>480) }}'
          - condition: or
            conditions:
              - condition: state
                entity_id: vacuum.xiaomi_vacuum_cleaner
                state: "docked"
              - condition: state
                entity_id: vacuum.xiaomi_vacuum_cleaner
                state: "idle"
      action:
        - service: script.turn_on
          data:
            entity_id: script.start_vacuum_hallway_by_door_sensor

    - alias: 'Set cleaning mode'
      trigger:
        platform: state
        entity_id: input_select.vacuum_power
      action:
        - service: >
            {% if trigger.to_state.state == 'Silent' %}
              script.set_vacuum_power_silent
            {% elif trigger.to_state.state == 'Standard' %}
              script.set_vacuum_power_standard
            {% elif trigger.to_state.state == 'Medium' %}
              script.set_vacuum_power_medium
            {% elif trigger.to_state.state == 'Turbo' %}
              script.set_vacuum_power_turbo
            {% elif trigger.to_state.state == 'Gentle' %}
              script.set_vacuum_power_gentle
            {% endif %}

    - alias: 'Vacuum - Telegram Control - Stop'
      trigger:
        platform: event
        event_type: telegram_callback
        event_data:
          data: '/vacuum_stop'
      action:
        - service: vacuum.pause
          entity_id: vacuum.xiaomi_vacuum_cleaner
        - service: telegram_bot.answer_callback_query
          data_template:
            callback_query_id: '{{ trigger.event.data.id }}'
            message: 'Пылесос остановлен.'

    - alias: 'Vacuum - Telegram Control - Go to Base'
      trigger:
        platform: event
        event_type: telegram_callback
        event_data:
          data: '/vacuum_go_home'
      action:
        - service: vacuum.return_to_base
          entity_id: vacuum.xiaomi_vacuum_cleaner
        - service: telegram_bot.answer_callback_query
          data_template:
            callback_query_id: '{{ trigger.event.data.id }}'
            message: 'Пылесос отправлен на базу.'